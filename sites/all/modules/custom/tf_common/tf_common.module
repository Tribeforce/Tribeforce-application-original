<?php
$GLOBALS['tf_version'] = 'Beta 1.3';

function tf_common_menu() {
  $items['dashboard'] = array(
    'title' => 'Tribeforce Dashboard',
    'page callback' => 'dashboard',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function tf_common_node_insert($node) {
  if($node->type === 'company') {
    drupal_set_message('A company has just been created. Report EXACTLY what you were doing to Femi!!!', 'warning');
    dpm($node);
  }
}


function tf_common_permission() {
  return array(
    'access tf_roles' => array(
      'title' => t('Access Tribeforce Roles module'),
      'description' => t('Granted to roles that need to be able to access the
                                                     Tribeforce roles module.'),
    ),
    'access tf_manage' => array(
      'title' => t('Access Tribeforce Manage module'),
      'description' => t('Granted to roles that need to be able to access the
                                                    Tribeforce manage module.'),
    ),
    'access tf_recruit' => array(
      'title' => t('Access Tribeforce Recruit module'),
      'description' => t('Granted to roles that need to be able to access the
                                                   Tribeforce recruit module.'),
    ),
  );
}

/******************
 * Page Callbacks *
 * ****************/
function dashboard() {
  if(user_is_logged_in()) {
    tf_help_msg('Some help text');
    $content = main_menu_ra();
  } else {
    $block = block_load('user', 'login');
    $content = _block_get_renderable_array(_block_render_blocks(array($block)));
  }


  $empty_regions = array(
    'left-sidebar' => array(),
    'content' => $content,
  );

  return tf_module('dashboard', $empty_regions);
}



// The $query needs to hold the alias r for a node (of type role)
function add_condition_my(&$query, $alias) {
  global $user;
  $query->join('field_data_field_company_ref', 'cr',
                                              $alias . '.nid = cr.entity_id');
  $query->join('field_data_field_admin_back_ref', 'ar',
               'cr.field_company_ref_nid = ar.entity_id');
  $query->join('users', 'u', 'ar.field_admin_back_ref_uid = u.uid');
  $query->condition('u.uid', $user->uid);
  return $query;
}



/*
Forms
*/

// All fields that need to be editable, should be added here
function item_form($form, &$form_state, $node, $parent_nid = 0) {
  $is_new = empty($node->nid) ? true : false;

  // Get the form elements of the node
  field_attach_form('node', $node, $form, $form_state, 'und'); // TODO: lang

  // We assume the title is always first
  $my_form['title'] = array(
    '#type' => 'textfield',
    '#default_value' => $node->title,
  );

  // Depending on the content type, other fields need to be in the form
  switch($node->type) {
    case 'skill':
      $my_form['body'] = $form['body'];
      $my_form['field_expert_level'] = $form['field_expert_level'];
      $my_form['level'] = flames_ra($node, 'field_expert_level');
      break;
    case 'role':
      $my_form['body'] = $form['body'];
      $my_form['field_category'] = $form['field_category'];
      break;
    case 'talent':
//      $my_form['field_cap_level'] = $form['field_cap_level'];
      break;
  }

  $my_form['actions'] = array(
    // We assume the submit button is always last
    '#weight' => 99,
    '#type' => 'container',
    '#attributes' => array('class' => array('actions')),
    'cancel' => array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('cancel', 'btn')),
      '#value' => t('Cancel'),
      '#ajax' => array(
        'callback' => 'ipe_cancel_callback',
        'progress' => array('type' => 'none'),
      ),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('submit', 'btn', 'btn-primary')),
      '#value' => $is_new ? t('Add') : t('Edit'),
      '#ajax' => array(
        'callback' => 'ipe_submit_callback',
        'progress' => array('type' => 'none'),
      ),
    ),
  );

  if($is_new && $node->type === 'role') {
    $my_form['actions']['submit']['#submit'] = array('ipe_submit_callback');
    unset($my_form['actions']['submit']['#ajax']);
    $my_form['actions']['cancel']['#submit'] = array('cancel_new_role');
    unset($my_form['actions']['cancel']['#ajax']);
  }

  // For nodes that have autocomplete add, the autocomplete field needs to be
  // added and the form needs to be put in a wrapper
  $autocomplete_type = array(
    'skill',
    'talent',
  );
  // TODO: split up between behavioral and business

  if($is_new && in_array($node->type, $autocomplete_type)) {
    if($node->type === 'talent') {
      $temp_type = strtolower($node->field_type['und'][0]['value']);
    }
    else {
      $temp_type = $node->type;
    }
    $ac_path ="roles/$parent_nid/ajax/autocomplete/$temp_type";

    $my_form = container_ra(array(
      'autocomplete' => container_ra(array(
        'autocomplete' => array(
          '#type' => 'textfield',
          '#autocomplete_path' => $ac_path,
        ),
        'actions' => $my_form['actions']['cancel'],
      )),
      'new' => $my_form,
    ));

  }

  $my_form['#attributes'] = array(
    'class' => array(
      $node->type,
      $is_new ? 'new' : '',
    ),
  );

  return $my_form;
}


function get_tf_page($module) {
  $uri = request_uri();
  $parts = explode('/', $uri);

  if(!empty($parts[1]) && $parts[1] == $module && !empty($parts[3]) ) {
    return '/' . $parts[3];
  }
}



/*
 Page Callbacks
*/
function tf_module($module, $empty_regions, $regions = array()) {
  // Module container

  global $tf_version;
  $messages = array('#markup' => theme('status_messages'));

  $main = array(
    'header' => region_ra('header', header_ra()),
    'messages' => region_ra('messages', $messages),
  );

  foreach($empty_regions as $region_name => $empty_ra) {
    if(empty($regions[$region_name])) {
      $regions[$region_name] = $empty_ra;
    }

    if($region_name !== 'left-sidebar') {
      $main[$region_name] = region_ra($region_name, $regions[$region_name]);
    }
  }

  $left_sidebar = array_merge(
    container_ra(array(
      'dashboard' => container_ra(array(
        'link' => array(
          '#theme' => 'link',
          '#text' => '<img src="/sites/default/files/logo.png">',
          '#path' => '',
          '#options' => array(
            'attributes' => array(),
            'html' => TRUE,
          ),
        ),
        'version' => $tf_version,
      )),
    )),
    $regions['left-sidebar']
  );


  return array(
    'page' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('tf-module', $module),
      ),
      'left-sidebar' => region_ra('left-sidebar', $left_sidebar),
      'main' => region_ra('main', $main),
    ),
  );
}


function header_ra() {
  global $user;
  $ra = array();
  if($user->uid) {
    $settings = container_ra(array(
      'icon' => '',
      'text' => t('Settings'),
    ));
    $logout = container_ra(array(
      'icon' => '',
      'text' => t('Logout'),
    ));

    $menu = main_menu_ra();

    $ra = container_ra(array(
      'menu' => $menu,
      'admin' => container_ra(array(
        'user' => t('Hello'). " " . strtoupper($user->name),
        'settings' => array(
          '#theme' => 'link',
          '#text' => drupal_render($settings),
          '#path' => "",
          '#options' => array(
            'attributes' => array(),
            'html' => TRUE,
          )
        ),
        'logout' => array(
          '#theme' => 'link',
          '#text' => drupal_render($logout),
          '#path' => "user/logout",
          '#options' => array(
            'attributes' => array(),
            'html' => TRUE,
          )
        ),
      )),
    ));
  }
  return $ra;
}

function main_menu_ra() {
  $items = array(
    'manage' => array(
      'path' => 'manage',
      'title' => t('Manage'),
    ),
    'roles' => array(
      'path' => 'roles',
      'title' => t('Roles'),
    ),
    'recruit' => array(
      'path' => 'recruit',
      'title' => t('Recruit'),
    ),
  );

  $ra = array(
    '#type' => 'container',
    '#attributes' => array('class' => 'tabs'),
  );

  foreach($items as $key => $item) {
    $ra[] = main_menu_item_ra($key, $item);
  }

  return $ra;
}

function main_menu_item_ra($key, $item) {
  $active = current_path() === $item['path'] ? 'active' : '';

  // TODO: Make a generic status object
  if($key === 'recruit') {
    if(count(tf_get_my_roles()) === 0) {
      return array(
        '#type' => 'container',
        '#attributes' => array('class' => array(
          $key,
          'disabled',
        )),
        'data' => array(
          '#markup' => $item['title'],
        ),
      );
    }
  }

  return array(
//    '#type' => 'container',
//    '#attributes' => array(),
    '#theme' => 'link',
    '#text' => $item['title'],
    '#path' => $item['path'],
    '#options' => array(
      'attributes' => array('class' => array(
        $key,
        $active,
      )),
      'html' => FALSE,
    ),
  );
}

/*
 Queries
*/
// TODO: Put in other file
function get_full_role($nid) {
//  $role = array();
  $role['node'] = node_load($nid);
  $role['tasks'] = get_tasks($role['node']);
  $role['skills'] = get_skills($role['node']);
  $role['talents'] = get_talents($role['node']);

  return $role;
}



// TODO: make generic with tasks and talents
// TODO: Optimize performance
// @param:
//   $role: Role node object
// @return
//   Array of Skill node objects keyed by [nid<nid>][node]
//     example: [nid123][node]
function get_skills($role) {
  $lang = LANGUAGE_NONE; //TODO
  $items = array();
  if(!empty($role->field_skill_ref)) {
    foreach($role->field_skill_ref[$lang] as $item) {
      $items['nid' . $item['nid']]['node'] = node_load($item['nid']);
    }
  }
  return $items;
}

// TODO: make generic with tasks and talents
// TODO: Optimize performance
// @param:
//   $role: Role node object
// @return
//   Array of Task node objects keyed by [nid<nid>][node]
//     example: [nid123][node]
function get_tasks($role) {
  $lang = LANGUAGE_NONE; //TODO
  $items = array();

  if(!empty($role->field_task_ref)) {
    foreach($role->field_task_ref[$lang] as $item) {
      $items['nid' . $item['nid']]['node'] = node_load($item['nid']);
    }
  }
  return $items;
}

// TODO: make generic with tasks and talents
// TODO: Optimize performance
// @param:
//   $role: Role node object
//   $get_tas: boolean determining if the Talent Attributes need to be
//             provided as well
// @return
//   Array of Talent node objects keyed by [nid<nid>][node]
//     example: [nid123][node]
//   If $get_tas = TRUE
//    The [nid<nid>][tas] holds the Talent Attributes
//    of Talent with node id = nid.
//    Setting this flag will improve the performance
function get_talents($role, $get_tas = TRUE) {
  $lang = LANGUAGE_NONE; //TODO
  $items = array('business' => array(), 'behavioral' => array());
  if(!empty($role->field_talent_ref)) {
    foreach($role->field_talent_ref[$lang] as $item) {
      $node = node_load($item['nid']);
      $type = strtolower ($node->field_type['und'][0]['value']);
      $items[$type]['nid' . $item['nid']]['node'] = $node;
      if($get_tas) $items[$type]['nid'.$item['nid']]['tas'] = get_tas($node);
    }
  }
  return $items;
}

// TODO: make generic with tasks and talents
// TODO: Optimize performance
// @param:
//   $talent: Talent node object
// @return
//   Array of Talent Attribute node objects keyed by [nid<nid>][node]
//     example: [nid123][node]
function get_tas($talent) {
  $items = array();
  if(!empty($talent->field_talent_attr_ref['und'])) {
    foreach($talent->field_talent_attr_ref['und'] as $item) {
      $items['nid' . $item['nid']]['node'] = node_load($item['nid']);
    }
  }
  return $items;
}


/*
 Render arrays
 */
 function sidemenu_item_ra($module, $title_node, $subtitle='', $actions='') {
  $page = get_tf_page($module);
  $link = '<div class="title">' . $title_node->title . '</div>';
  if(!empty($subtitle)) {
    $link .= '<div class="subtitle">(' . $subtitle . ')</div>';
  }
  $url = $module . '/' . $title_node->nid . $page;

  return array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('item', $module, $module . '-' . $title_node->nid),
    ),
    'link' => array(
      '#markup' => l($link, $url, array('html' => TRUE)),
    ),
    'actions' => $actions,
  );
}


function container_ra($regions = array()) {
  $ra = array();

  foreach($regions as $key => $region) {
    $ra[$key] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array($key),
      ),
      // If the element of an array is an array, it adds the array,
      // otherwise it sets the #markup
      $key => is_array($region) ? $region : array('#markup' => $region),
    );
  }

  return $ra;
}

function region_ra($name, $ra) {
  return array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('tf-region', 'clearfix', $name),
    ),
    'data' => $ra,
  );
}

function overlay_ra($ra) {
  return region_ra('overlay', container_ra(array('inner' => $ra)));
}


function slide_pane_ra($content, $title = '') {
  $ra = container_ra(array(
    'sp-title' => $title,
    'sp-content' => $content,
    'sp-close' => array(),
  ));
  return region_ra('slide-pane', $ra);
}

function empty_ra($tf_module) {
  return array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array($tf_module, 'no-selected'),
    ),
    'data' => array(
      '#markup' => t('No ' . $tf_module . ' selected'),
    ),
  );
}

// Returns a renderable array for the flames (expert level) for skills
function flames_ra($node, $field_name) {
  $ra = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('level'),
    ),
  );

  $field_info = field_info_field($field_name);
  $number_of_flames = count($field_info['settings']['allowed_values']);

  // The 4 flames
  for($i = 1; $i<=$number_of_flames; $i++) {
    $on = '';
    $field = $node->$field_name;
    if(!empty($field)) {
      $on = $field['und'][0]['value'] >= $i ? 'on' : '';
    }
    $ra['level' . $i] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('level' . $i, $on)),
    );
  }

  return $ra;
}

function items_ra($items, $type, $parent_nid = 0, $display = 'edit') {
  $body = array();
  $index = 0;
  foreach($items as $key => $item) {
    $position = array(
      'first'    => $index === 0 ? 'first' : '',
      'index'    => $index,
      'even_odd' => $index % 2 === 0 ? 'even' : 'odd',
      'last'     => $index === (count($items) - 1) ? 'last' : '',
    );
    $body[$key] = item_ra($item, $display, $position, $parent_nid);
    $index++;
  }

  // Set the default title and update if needed of the list
  $title = t(ucfirst($type) . 's');

  // We never need the show_hide titles or Add buttons for TAs
  if($display === 'edit' && $type !== 'talent_attribute') {
    $text = "Add a new $type";

    switch($type) {
      case 'behavioral':
      case 'business':
        $text = "Add a new $type talent";
        $title = ucfirst($type) . " talents";
        break;
    }

    $body['add'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('add-link')),
      '#theme' => 'link',
      '#text' => t($text),
      '#path' => "roles/$parent_nid/nojs/ipa/$type",
      '#options' => array(
        'attributes' => array('class' => array('use-ajax')),
        'html' => FALSE,
      ),
    );
    return show_hide($title, $body);
  } else {
    return $body;
  }

/*
  if($type === 'talent_attribute') {
  }
  else {
    // The Add buttons only need to appear in the edit display
    if($display === 'edit') {
    } elseif($display === 'person-details'
          || $display === 'widget_old'
          || $display === 'widget'
          || $display === 'person-edit') {
      return $body;
    }
  }
*/
}

function item_ra($node_array,$display='edit',$position=array(),$parent_nid=0) {
  if(empty($position)) {
    $position = array(
      'index' => 0,
      'even_odd' => 'even',
      'first' => 'first',
      'last' => 'last',
    );
  }

  return array_merge(
    array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          isset($node_array['node']->type) ? $node_array['node']->type : '',
          isset($node_array['node']->nid) ? 'nid-'.$node_array['node']->nid :'',
          'index-' . $position['index'],
          $position['even_odd'],
          $position['first'],
          $position['last'],
          "display-$display",
        ),
      ),
    ),
    item_inner_ra($node_array, $parent_nid, $display)
  );
}


// Make content container and adds edit and delete links
// if the $display is 'edit'
function make_content_container($node, $display = 'edit') {
  $ra = array(
    'content' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('content')),
      // Needs to be completed below
    ),
  );

  if($display === 'edit') {
    $ra['edit-link'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('edit-link')),
      '#theme' => 'link',
      '#text' => t('edit'),
      '#path' => "roles/nojs/ipe/" . $node->nid,
      '#options' => array(
        'attributes' => array('class' => array('use-ajax')),
        'html' => FALSE,
      ),
    );
    $ra['delete-link'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('delete-link')),
      '#theme' => 'link',
      '#text' => t('delete'),
      '#path' => "roles/nojs/ipd/" . $node->nid,
      '#options' => array(
        'attributes' => array('class' => array('use-ajax')),
        'html' => FALSE,
      ),
    );
  }
  return $ra;
}

//All fields that need to be displayed should be added here in the right order
// TODO: This role_nid is a hack to make it possible to add talents
function item_inner_ra($node_array, $parent_nid = 0, $display = 'edit') {
  $ra = make_content_container($node_array['node'], $display);

  // Populate the 'content' part
  switch($node_array['node']->type) {
    /*******
    ROLES
    *******/
    case 'role':
      switch($display) {
        case 'edit':
          $ra['content']['delete'] = container_ra(array('delete' => array()));
          $ra['content']['edit'] = container_ra(array('edit' => array()));
          $ra['content']['title'] = field_view_title($node_array['node']);
          $ra['content']['categories'] = role_categories_ra(
                                           $node_array['node']->field_category);
          $ra['content']['body'] = field_view_field('node', $node_array['node'],
                            'body', array('label' => 'hidden', 'weight' => 20));
          break;
        case 'person-details':
        case 'person-edit':
          $path="manage/person/$parent_nid/unassign/". $node_array['node']->nid;
          $ra['content']['title'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('title')),
            '#theme' => 'link',
            '#text' => $node_array['node']->title,
            '#path' => 'roles/' . $node_array['node']->nid . '/view',
            '#options' => array(
              'attributes' => array(),
              'html' => FALSE,
            ),
          );
          if($display === 'person-details') break;
          else {
            $ra['unassign'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('unassign')),
              '#theme' => 'link',
              '#text' => t('remove'),
              '#path' => $path,
              '#options' => array(
                'attributes' => array('class' => array('btn')),
                'html' => FALSE,
              ),
            );
            break;
          }
        case 'widget_old':
          $path = "manage/person/$parent_nid/assign/". $node_array['node']->nid;
          $ra['content']['title'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('title')),
            '#theme' => 'link',
            '#text' => $node_array['node']->title,
            '#path' => $path,
            '#options' => array(
              'attributes' => array(),
              'html' => FALSE,
            ),
          );
          break;
        case 'widget':
          $ra['content']['title'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array(
              'title',
              'nid-'. $node_array['node']->nid,
            )),
            'data' => array('#markup' => $node_array['node']->title),
          );
          break;
        case 'sidebar':
          $path = "roles/". $node_array['node']->nid;
          $text_ra = (array(
            'title' => field_view_title($node_array['node'], -10),
            'subtitle' => field_view_field('node', $node_array['node'],
                            'field_category', array('label' => 'hidden')),
          ));
          $text = drupal_render($text_ra);
          $ra['content']['item'] = array(
//            '#type' => 'container',
//            '#attributes' => array('class' => array('title')),
            '#theme' => 'link',
            '#text' => $text,
            '#path' => $path,
            '#options' => array(
              'attributes' => $path == current_path()
                ? array('class' => array('active')) : array(),
              'html' => TRUE,
            ),
          );
          $ra['content']['actions'] = role_actions_ra($node_array['node']);


#  $page = get_tf_page($module);
#  $link = '<div class="title">' . $title_node->title . '</div>';
#  if(!empty($subtitle)) {
#    $link .= '<div class="subtitle">(' . $subtitle . ')</div>';
#  }
#  $url = $module . '/' . $title_node->nid . $page;

#  return array(
#    '#type' => 'container',
#    '#attributes' => array(
#      'class' => array('item', $module, $module . '-' . $title_node->nid),
#    ),
#    'link' => array(
#      '#markup' => l($link, $url, array('html' => TRUE)),
#    ),
#    'actions' => $actions,
#  );
          break;
      }
      break;


    /*******
    TASKS
    *******/
    case 'task':
      if($display === 'edit') {
        $ra['content']['edit'] = container_ra(array('edit' => array()));
        $ra['content']['delete'] = container_ra(array('delete' => array()));
      }
      $ra['content']['title'] = field_view_title($node_array['node']);
      break;


    /*******
    SKILLS
    *******/
    case 'skill':
      // Available displays: edit, person-details, widget
        $ra['content']['level'] = flames_ra($node_array['node'],
                                                          'field_expert_level');
      if($display === 'edit') {
        $ra['content']['edit'] = container_ra(array('edit' => array()));
        $ra['content']['delete'] = container_ra(array('delete' => array()));
      }
      $ra['content']['title'] = field_view_title($node_array['node']);
      if($display === 'edit' || $display === 'person-details') {
        $ra['content']['body'] = field_view_field('node', $node_array['node'],
            'body', array('label' => 'hidden', 'weight' => 30));
      }
      break;


    /*******
    TALENTS
    *******/
    case 'talent':
      if($display !== 'person-details') {
        $ra['content']['tas'] = container_ra(array('tas' => items_ra(
               $node_array['tas'], 'talent_attribute', $parent_nid, $display)));
      }
      $ra['content']['body'] = field_view_field('node', $node_array['node'],
                          'body', array('label' => 'hidden', 'weight' => 0 ));
      $ra['content']['title'] = field_view_title($node_array['node'], 0);
      if($display === 'edit') {
        $ra['content']['delete'] = container_ra(array('delete' => array()));
      }
      $ra['content']['level'] = flames_ra($node_array['node'],
                                                           'field_cap_level');
      if($display === 'edit') {
        $ra['content']['save'] = container_ra(array('save' => array()));
        $ra['flame-links'] = get_flame_links($node_array['node'],
                                                'field_cap_level', $parent_nid);
        $ra['save-link'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('save-link')),
          '#theme' => 'link',
          '#text' => t('save'), // For debug only: should not be visible
          '#path' => "roles/$parent_nid/nojs/save_talent/"
                   . $node_array['node']->nid,
          '#options' => array(
            'attributes' => array('class' => array('use-ajax')),
            'html' => FALSE,
          ),
        );
      }
      break;


    /*****************
    TALENT ATTRIBUTES
    *****************/
    case 'talent_attribute':
      // Available displays: edit, person-details, widget
      $ra['content']['title'] = field_view_title($node_array['node']);
      if($display === 'edit' || $display === 'person-details') {
        $ra['content']['body'] = field_view_field('node', $node_array['node'],
                          'body', array('label' => 'hidden', 'weight' => 20));
      }
      break;


    /*******
    PERSONS
    *******/
    case 'person':
      if($display !== 'widget') { // For performance reasons
        $empty_roles = container_ra(array('empty' => array(
          '#markup' => t('No role added yet')
        )));

        $roles = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('roles')),
          '#weight' => -10,
          'data' => empty($node_array['roles']) ? $empty_roles :
            items_ra($node_array['roles'],
            'role', $node_array['node']->nid, 'person-details'),
        );
      }

      switch($display) {
        case 'widget':
          $ra['content']['avatar']=field_view_field('node', $node_array['node'],
            'field_avatar', array(
            'label' => 'hidden',
            'weight' => 0,
            'settings' => array('image_style' => 'icon')));
          $ra['content']['full_name'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('assign-to-link')),
            '#weight' => 10,
            '#theme' => 'link',
            '#text' => get_full_name($node_array['node']),
            '#path' => "roles/$parent_nid/assign_to/" . $node_array['node']->nid,
            '#options' => array(
              'attributes' => array(),
              'html' => FALSE,
            ),
          );
          break;
        case 'manage':
          $manage_btn = array(
            '#theme' => 'link',
            '#type' => 'container',
            '#attributes' => array('class' => array('manage')),
            '#text' => t('Manage'),
            '#path' => 'manage/person/' . $node_array['node']->nid,
            '#weight' => 20,
            '#options' => array(
              'attributes' => array('class' => array(
                'btn',
              )),
              'html' => FALSE,
            ),
          );

          $ra['content']['col-1'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('col', 'col-1')),
            'first_name' => field_view_field('node', $node_array['node'],
               'field_first_name', array('label' => 'hidden', 'weight' => -30)),
            'last_name' => field_view_title($node_array['node'], -20),
            'roles' => $roles,
            'email' => field_view_field('node', $node_array['node'],
                      'field_email', array('label' => 'hidden', 'weight' => 5)),
            'phone' => field_view_field('node', $node_array['node'],
                     'field_phone', array('label' => 'hidden', 'weight' => 10)),
            'manage_btn' => $manage_btn,
          );
          $path = 'manage/person/' . $node_array['node']->nid.'/nojs/remark';
          $ra['content']['col-2'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('col', 'col-2')),
            'inner' => array(
              '#type' => 'container',
              '#attributes' => array('class' => array('inner')),
              'avatar' => field_view_field('node', $node_array['node'],
                'field_avatar', array(
                'label' => 'hidden',
                'weight' => -40,
                'settings' => array('image_style' => 'overview_square'))),
              'num_remarks' => container_ra(array(
                'num-remarks' => count($node_array['remarks'])
              )),
              'remark-btn' => array(
                '#theme' => 'link',
                '#type' => 'container',
                '#attributes' => array('class' => array('remark-btn')),
                '#text' => t('Remark'),
                '#path' => $path,
                '#weight' => 40,
                '#options' => array(
                  'attributes' => array('class' => array(
                    'use-ajax',
                    'btn',
                    'btn-primary',
                  )),
                  'html' => FALSE,
                ),
              ),
            ),
          );
          break;
        case 'person-details':
          $last_eval = end($node_array['evaluations']);

          $ra['content']['avatar']=field_view_field('node', $node_array['node'],
            'field_avatar', array(
              'label' => 'hidden',
              'weight' => -40,
              'settings' => array('image_style' => 'medium'))
          );
          $ra['content']['edit'] = array(
            '#theme' => 'link',
            '#text' => t('Edit details'),
            '#path' => 'manage/person/' . $node_array['node']->nid . "/edit",
            '#options' => array(
              'attributes' => array('class'=>array('btn','edit','btn-primary')),
              'html' => FALSE,
            ),
            '#weight' => -35,
          );
          $ra['content']['first_name'] = field_view_field('node',
            $node_array['node'], 'field_first_name',
                                   array('label' => 'hidden', 'weight' => -30));
          $ra['content']['last_name']=field_view_title($node_array['node'],-20);
          $ra['content']['roles'] = $roles;
          $ra['content']['birth_date'] = field_view_field('node',
            $node_array['node'], 'field_birth_date', array('weight' => -6));
          $ra['content']['hire_date'] = field_view_field('node',
            $node_array['node'], 'field_hire_date', array('weight' => -3));
          $ra['content']['hire_date']['#formatter'] = 'short_date';
//          $ra['content']['evaluations'] = items_ra($node_array['evaluations'],
//                                         'evaluation', $parent_nid, $display);
          if(!empty($last_eval)) {
            $ra['content']['last_eval'] = item_ra($last_eval, $display, array(),
                                                      $node_array['node']->nid);
          }
          $ra['add_evaluation'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('add-evaluation'),
            ),
            '#theme' => 'link',
            '#text' => t('Add a new evaluation'),
            '#path' => 'manage/evaluate/' . $node_array['node']->nid,
            '#options' => array(
              'attributes' => array('class' => array('btn', 'btn-primary')),
              'html' => FALSE,
            ),
          );

          break;
      }
      break;


    /*******
    REMARKS
    *******/
    case 'remark':
      $ra['content']['remark'] = field_view_title($node_array['node'], -10);
      if(!empty($node_array['attached_to'])) {
        $ra['content']['attached_to'] =
          item_ra($node_array['attached_to'], $display, array(), $parent_nid);
      }
      $ra['content']['date'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('date'),),
        'data' => array(
          '#markup' => format_date($node_array['node']->changed, 'short_date'),
        ),
        '#weight' => 10,
      );
      $ra['edit-link'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('edit')),
        '#theme' => 'link',
        '#text' => t('edit'),
        '#path' => "manage/person/$parent_nid/nojs/remark/1/"
                                                     . $node_array['node']->nid,
        '#options' => array(
          'attributes' => array('class' => array(
            'use-ajax',
            'btn',
            'btn-primary',
            )),
          'html' => FALSE,
        ),
      );
      break;


    /***********
    EVALUATIONS
    ***********/
    case 'evaluation':
      $ra['content']['title'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('title')),
        '#theme' => 'link',
        '#text' => format_date($node_array['node']->changed, 'short_date'),
        // TODO: Maybe this is not nice to go to another module
        '#path' => "recruit/$parent_nid/nojs/candidates/interview/" . $node_array['node']->nid,
        '#options' => array(
          'attributes' => array('class' => array('use-ajax')),
          'html' => FALSE,
        ),
      );
/*
      $ra['content']['date'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('date'),),
        'data' => array(
          '#markup' => format_date($node_array['node']->changed, 'short_date'),
        ),
        '#weight' => 10,
      );
*/
      break;

  }

  return $ra;
}



function persons_ra($person_types, $parent_nid, $display) {
  $ra = array();

  // Translate the LOV
  $lov = list_allowed_values(field_info_field('field_person_type'));

  // Define what types should be shown
  $show_array = array(1, 2, 3, 4);
  switch($display) {
    case 'manage':
      $show_array = array(2, 3, 4);
      break;
    case 'widget':
      $show_array = array(2, 3, 4);
      break;
  }

  $index = 0;
  foreach($person_types as $person_type_id => $persons) {
    if(in_array($person_type_id, $show_array)) {
      $type = $lov[$person_type_id];
      $ra['person-type-' . $person_type_id] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'person-type',
            'person-type-' . $person_type_id,
            'person-type-' . $type,
            'index-' . $index,
            'clearfix',
          ),
        ),
        'data' => items_ra($persons, $type, $parent_nid, $display),
      );
      $index++;
    }
  }

  return $ra;
}

// $item can be an string or an array because of the container_ra function
function dropdown_widget_ra($class_name, $item, $dropdown, $button = TRUE) {
  return array(
    '#type' => 'container',
    '#attributes' => array('class' => array($class_name, 'dropdown-widget')),
    'button' => !$button ? array() : array(
                            '#type' => 'container',
                            '#attributes' => array('class' => array('btn')),
                            'data' => array('#markup'=>'<i class="caret"></i>'),
                          ),
    'item' => container_ra(array('item' => $item)),
    'dropdown' => container_ra(array('dropdown' => $dropdown )),
  );
}

function tabs_widget_ra($tabs, $panes = array()) {
  $ra = container_ra(array(
    'tab-pane' => container_ra(array(
      'tabs' => container_ra($tabs),
      'panes' => container_ra($panes),
    )),
  ));

  // Set the first tab active
  $first = &$ra['tab-pane']['tab-pane']['tabs']['tabs'];
  $first[key($first)]['#attributes']['class'][] = 'active';
  // Set the first pane active
  $first = &$ra['tab-pane']['tab-pane']['panes']['panes'];
  $first[key($first)]['#attributes']['class'][] = 'active';

  return $ra;
}


/*
 Helper functions
*/
function show_hide($title, $body) {
  $header = container_ra(array(
    'title' => $title,
    'show' => t('show'),
    'hide' => t('hide'),
  ));

  return container_ra(array(
    'show-hide-header' => $header,
    'body' => $body,
    'footer' => array(),
  ));
}

function get_singular($prural) {
  return substr($prural, 0, (strlen($prural) - 1 ));
}

// Mimics Drupals field_view_field for the containers
function field_view_title($node, $weight = 0) {
  return array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'node-' . $node->type,
        'field',
        'field-name-title',
        'field-type-text',
        'field-label-hidden',
      ),
    ),
    '#weight' => $weight,
    'data' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('field-items'),
      ),
      'data' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('field-item', 'even'),
        ),
        'data' => array(
          '#markup' => $node->title,
        ),
      )
    )
  );
}

function get_items_to_assess($role_nids) {
  $lang = LANGUAGE_NONE; //TODO
  $items = array();

  foreach($role_nids as $role_nid) {
    $full_role = get_full_role($role_nid);

    // Loop over the skills
    foreach($full_role['skills'] as $item) {
      if(!empty($item['node']->field_assess)) {
        if($item['node']->field_assess[$lang][0]['value'] == 1) {
          $items['nid-' . $item['node']->nid] = $item['node'];
        }
      }
    }

    // Loop over the business talents for talent attributes
    foreach($full_role['talents']['business'] as $talent) {
      foreach($talent['tas'] as $item) {
        if(!empty($item['node']->field_assess)) {
          if($item['node']->field_assess[$lang][0]['value'] == 1) {
            $items['nid-' . $item['node']->nid] = $item['node'];
          }
        }
      }
    }

    // Loop over the business talents for talent attributes
    foreach($full_role['talents']['behavioral'] as $talent) {
      foreach($talent['tas'] as $item) {
        if(!empty($item['node']->field_assess)) {
          if($item['node']->field_assess[$lang][0]['value'] == 1) {
            $items['nid-' . $item['node']->nid] = $item['node'];
          }
        }
      }
    }

  }

  return $items;
}


// TODO: unify this with the framework
function tf_get_my_roles() {
  $old_roles = get_roles();
  $roles = array();
  // Todo improve performance (will be done by unifying)
  foreach($old_roles as $old_role) {
    $role = node_load($old_role->nid);
    $roles['role-' . $role->nid]['node'] = $role;
  }
  return $roles;
}




// This function creates an Interpretation for every Skill or Talent Attributes
// currently related to a Person (through his/her Roles).
// Every Interpretation is linked to an Assessment
// Parameters:
//   $role_nids: The array of nids to make Interpretations for
//   $parent: The the Evaluation or Assessment
function prepare_interpretations($role_nids, $parent) {
  $ais = get_items_to_assess($role_nids);

  foreach ($ais as $ai) {
    $node = new stdClass();
    $node->type = 'interpretation';
    node_object_prepare($node);
    $node->field_ass_item_ref['und'][] = array('nid' => $ai->nid);
    $node->field_parent_ref['und'][] = array('nid' => $parent->nid);
    $node->field_score = array(LANGUAGE_NONE => array(array('value' => 0)));
// We don't want this text to appear all the time, we take No Comment
//    $node->title = "Interpretation for interview " . $parent->nid
//                 . ' and ' . $ai->type . ' ' . $ai->nid;
    $node->title = t("No comment");
    node_save($node);
  }
}


// Returns an array holding the values of a member for the objects passed
//  $objects: array of objects
//  $member: the name of the object member to put in the array
function flatten_objects($objects, $member) {
  $flat_array = array();

  foreach($objects as $object) {
    // TODO: be more specific
    if(is_object($object)) {
      $flat_array[] = $object->$member;
    }
    else {
      $flat_array[] = $object['node']->$member;
    }
  }

  return $flat_array;
}


// Returns and array of nid
// Can be used to loop over a set of nodes
function flatten_nids($array) {
  foreach($array as $el) {
    $nids[] = $el['nid'];
  }
  return $nids;
}

// Assumes format aaa-bbb-ccc-1234 and returns 1234
function get_nid($class) {
  $class_array = explode('-', $class);
  return $class_array[count($class_array) - 1];
}

// Returns the full name of a Person as a string
function get_full_name($person) {
  $first_name = $person->field_first_name['und'][0]['value'];
  $last_name = $person->title;
  return "$first_name $last_name";
}


// This function checks in the node belonging to the $nid passed belongs to the
// currently logged in user.
// For a ROLE, CAMPAIGN and PERSON it means be linked to the company linked to
// the currently logged in user
// We return TRUE if the $nid is 0 or if a match has been found
// In all other cases we return FALSE
function tf_is_own_item($nid) {
  // this is a special case (add or not given) and should be ignored
  if($nid === '0') {
    return TRUE;
  } else {
    // Load the node to check
    $node = node_load($nid);

    if(!empty($node->type)) {
      switch($node->type) {
        case 'evaluation':
          if(!empty($node->field_person_back_ref['und'][0]['nid'])) {
            $person_nid   = $node->field_person_back_ref['und'][0]['nid'];
            return tf_is_own_item($person_nid);
          }
          break;
        case 'interview':
          if(!empty($node->field_person_back_ref['und'][0]['nid'])
          && !empty($node->field_campaign_ref['und'][0]['nid'])) {
            $person_nid   = $node->field_person_back_ref['und'][0]['nid'];
            $campaign_nid = $node->field_campaign_ref['und'][0]['nid'];
            return tf_is_own_item($person_nid) && tf_is_own_item($campaign_nid);
          }
          break;
        case 'role':
        case 'campaign':
        case 'person':
          $company = tf_em_get_company();
          if(!empty($company['und'][0]['nid'])) {
            if(!empty($node->field_company_ref)) {
              foreach($node->field_company_ref as $role_company) {
                if($role_company[0]['nid'] === $company['und'][0]['nid']) {
                  return TRUE;
                }
              }
            }
          }
          break; // Is not really needed, but it doesn't hurt
      }
    }
  }
  return FALSE;
}

// 3 arguments should be enough
function tf_is_own($nid1 = '0', $nid2 = '0', $nid3 = '0') {
  $nids = array($nid1, $nid2, $nid3);
  foreach($nids as $nid) {
    if(!tf_is_own_item($nid)) return FALSE;
  }
  return TRUE;
}

function get_default_avatar() {
  return array(
    'und' => array(
      array(
        'fid' => 145,
        'alt' => '',
        'title' => '',
        'width' => 425,
        'height' => 402,
        'uid' => 1,
        'filename' => 'person.jpg',
        'uri' => 'public://default_images/person.jpg',
        'filemime' => 'image/jpeg',
        'filesize' => 13113,
        'status' => 1,
  //    timestamp (String, 10 characters ) 1345628731
      ),
    ),
  );
}

function tf_help_msg($msg) {
  if(empty($_POST)) {
    drupal_set_message(t($msg), 'help');
  }
}
